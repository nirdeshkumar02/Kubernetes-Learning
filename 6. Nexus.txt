Nexus - A place where we can upload the artifects of our appliations. Artifect is nothing but a compress and build file which has all the
necessary dependencies and code to run our application on the server.

Nexus can be use as a server hosted like you can download nexus to your own server.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
You can also deploy nexus on docker by using image - sonatype/nexus3
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Download nexus on your server -
=====================================
Run a ec2 instance of t2.medium with image ubuntu and then run this command on the server

apt update
apt install openjdk-8-jre-headless
apt install net-tools
cd /opt
wget https://download.sonatype.com/nexus/3/nexus-3.43.0-01-unix.tar.gz
tar -zxvf latest-unix.tar.gz
adduser nexus
usermod -G sudo nexus
chown -R nexus:nexus nexus-3.28.1-01
chown -R nexus:nexus sonatype-work
vim nexus-3.28.1-01/bin/nexus.rc
run_as_user="nexus"
su - nexus
/opt/nexus-3.28.1-01/bin/nexus start
ps aux | grep nexus
netstat -lnpt

Now with you public ip of server and with port 8081, You can connect to nexus.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Create Role with permission of upload and retrieve artifacts - Priviliages - nx-repository-view-maven2-maven-snapshots-*
Create User with above role to give these permission

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

To Upload Gradle Artifects to nexus
======================================

Create a file gradle.properties in gradle directory and add this data 
----------------------------------------------

repoUser = nirdesh
repoPassword = Nirdesh@123

Add this to your build.gradle file
-----------------------------------

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/java-app-$version"+".jar") {
                extension 'jar'
            }
        }
    }

    repositories {
        maven {
            name 'nexus'
            url "http://13.232.237.54:8081/repository/maven-snapshots/"
            allowInsecureProtocol true
            credentials {
                username project.repoUser
                password project.repoPassword
            }
        }
    }
} 

Build the project - ./gradlew build
Publish to Nexus - ./gradlew publish

You will get the artifect in the above mention url.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

To Upload Maven Artifects to nexus
======================================

Create a file inside your c/user/nksaini/.m2 => settings.xml and add this there
--------------------------------------------------------------------------------

<settings>
    <servers>
        <server>
            <id>nexus-snapshots</id>
            <username>nirdesh</username>
            <password>Nirdesh@123</password>
        </server>
    </servers>
</settings>


Add this to your pom.xml file under build
-------------------------------------------

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
        </plugins>

Add this to your pom.xml under project
------------------------------------------

    <distributionManagement>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <url>http://13.232.237.54:8081/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>


Build the jar - mvn package
Publish to Nexus - mvn deploy

You will get the artifect in the above mention url.
Or go to nexus dashboard, browse on header, Browse, maven-snapshots, you will find your artifect 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Nexus EndPoints or RestAPIs
---------------------------------

List all repo of nexus => curl -u nirdesh:Nirdesh@123 -X GET 'http://13.232.237.54:8081/service/rest/v1/repositories'

List the contents of repo => curl -u nirdesh:Nirdesh@123 -X GET 'http://13.232.237.54:8081/service/rest/v1/components?repository=maven-snapshots'

List the contents of single app inside repo => curl -u nirdesh:Nirdesh@123 -X GET 'http://13.232.237.54:8081/service/rest/v1/components/<id>' 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Blob Store
============

Blob Store is a type of storage which can have the data of repository. By default when we run nexus there is a default blob store.
All the data or info is sotred in - sonatype-work folder which is come by default with nexus.

You can create your own storage and put this for specific repo.

Blob store are of two types - 1 File as our file manager (By Default) and 2. S3 as cloud based

Blob Store can't be modified.
Blob Store used by a repo can't be deleted.

Component vs Assets
-------------------
Component are the group which is pushed to nexus. This is the abstract and Assets are those file or actual packages which are come under this component.
1 Component = 1 or more assets

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Cleanup Policies
================
These policies are allowed to clean some space for new components. these delete all components which meets some specific rule.
example - delete all components which are published 30 days before.

there are 4 critiria on behalf components are cleanup -
1. Published Before
2. Last Downloaded Before
3. Release Type
4. Asset Name Matcher

Attach created policy to repo
=============================
Choose the repo => Under repo setting => under clean up setting => add your cleanup policy

Note- These cleanup policies task will execute automatically with using default task setting. But If you want to changes the execution setting of cleanup
You can create a cleanup policy task according to your need.





